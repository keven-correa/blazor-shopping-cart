@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if(country is null)
{
    <p>Cargando...</p>
}else
{
    <h3>@country.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" data-toggle="tooltip" data-placement="right" title="Agregar estado" href="/states/create/@country.Id">Nuevo Estado/Provincia <i class="oi oi-plus" /></a>
        <a class="btn btn-success" data-toggle="tooltip" data-placement="right" title="Regresar" href="/countries">Regresar <i class="oi oi-list" /></a>
    </div>

    <GenericList MyList="states">
        <Loading>
            <p>Cargando...</p>
        </Loading>
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Estado/Prov.</th>
                        <th>Cant. de ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-warning" data-toggle="tooltip" data-placement="left" title="Información" href="/states/details/@state.Id"><i class="oi oi-info" /></a>
                                <a class="btn btn-info" data-toggle="tooltip" data-placement="left" title="Editar país" href="/states/edit/@state.Id"><i class="oi oi-pencil" /></a>
                                <button class="btn btn-danger" data-toggle="tooltip" data-placement="right" title="Eliminar país" @onclick="@(() => DeleteAsync(state.Id))"><i class="oi oi-trash" /></button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>

}

@code{
    private Country? country;
    private List<State>? states;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var res = await repository.Get<Country>($"/api/countries/{Id}");
        if (res.Error)
        {
            if (res.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }
            var message = await res.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        country = res.Response;
        states = country!.States!.ToList();
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmar",
                Text = "Esta seguro de eliminar este estado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var responseHttp = await repository.Delete($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}